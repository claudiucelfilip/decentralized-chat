{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BigInt","JSBI","App","_useState","useState","_useState2","Object","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","host","setHost","_useState3","Buffer","from","Wavelet","generateNewWallet","secretKey","toString","_useState4","privateKey","setPrivateKey","_useState5","undefined","_useState6","client","setClient","_useState7","_useState8","node","setNodeInfo","_useState9","_useState10","contractAddress","setContractAddress","_useState11","_useState12","contract","setContract","_useState13","_useState14","message","setMessage","_useState15","_useState16","chatLogs","setChatLogs","_useState17","_useState18","account","setAccount","accountRef","useRef","useEffect","current","_useState19","accounts","consensus","_useState20","sockets","setSockets","socketsRef","reset","close","connect","_ref","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","_client","wallet","walletAddress","wrap","_context","prev","next","t0","getNodeInfo","t1","sent","loadWalletFromPrivateKey","publicKey","t2","getAccount","t3","pollAccounts","onAccountUpdated","msgs","forEach","msg","event","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","balance","id","t4","alert","stop","apply","this","arguments","load","_ref2","_callee3","_context3","Contract","init","pollConsensus","onRoundEnded","_","_callee2","_context2","fetchAndPopulateMemoryPages","test","logs","sendMessage","_ref4","_callee4","_context4","call","type","value","react__WEBPACK_IMPORTED_MODULE_4___default","createElement","Fragment","_rebass_grid__WEBPACK_IMPORTED_MODULE_6__","style","textAlign","width","marginTop","marginBottom","href","mb","disabled","data-lpignore","onChange","evt","target","onKeyPress","_ref5","_callee5","e","_context5","key","_x","minWidth","float","onClick","length","placeholder","_ref6","_callee6","_context6","_x2","concat","public_key","pr","maxLength","_ref7","_callee7","_context7","_x3","className","height","rows","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.831df5fc.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\nimport {Contract, Wavelet} from 'wavelet-client';\nimport {Box, Flex} from '@rebass/grid';\nimport JSBI from 'jsbi';\n\nconst BigInt = JSBI.BigInt;\n\nconst App = () => {\n    const [host, setHost] = useState('https://testnet.perlin.net');\n    const [privateKey, setPrivateKey] = useState(Buffer.from(Wavelet.generateNewWallet().secretKey, \"binary\").toString(\"hex\"));\n    const [client, setClient] = useState(undefined);\n    const [node, setNodeInfo] = useState(undefined);\n    const [contractAddress, setContractAddress] = useState('9f549686e464b2addfdcd5061deeeb7c622ea430c5f93ddaf5cf8a8f114f8b65');\n    const [contract, setContract] = useState(undefined);\n    const [message, setMessage] = useState('');\n    const [chatLogs, setChatLogs] = useState([]);\n\n    const [account, setAccount] = useState(undefined);\n\n    const accountRef = useRef(account);\n    useEffect(() => { accountRef.current = account }, [account]);\n\n    const [sockets, setSockets] = useState({accounts: undefined, consensus: undefined});\n\n    const socketsRef = useRef(sockets);\n    useEffect(() => { socketsRef.current = sockets }, [sockets]);\n\n    const reset = () => {\n        setClient(undefined);\n        setAccount(undefined);\n        setNodeInfo(undefined);\n\n        setContract(undefined);\n        setContractAddress('');\n        setMessage('');\n        setChatLogs([]);\n\n        const sockets = socketsRef.current;\n\n        if (sockets.accounts) {\n            sockets.accounts.close(1000, \"connection closing normally\");\n        }\n\n        if (sockets.consensus) {\n            sockets.consensus.close(1000, \"connection closing normally\");\n        }\n\n        setSockets({accounts: undefined, consensus: undefined});\n    };\n\n    const connect = async () => {\n        if (client === undefined) {\n            try {\n                const client = new Wavelet(host);\n                setNodeInfo(await client.getNodeInfo());\n\n                const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n                const walletAddress = Buffer.from(wallet.publicKey).toString(\"hex\");\n                setAccount(await client.getAccount(walletAddress));\n\n                setClient(client);\n\n                sockets.accounts = await client.pollAccounts({\n                    onAccountUpdated: msgs => {\n                        msgs.forEach(msg => {\n                            switch (msg.event) {\n                                case 'balance_updated': {\n                                    setAccount({...accountRef.current, balance: msg.balance});\n                                    break;\n                                }\n                                default: {\n                                    break;\n                                }\n                            }\n                        });\n                    }\n                }, {id: walletAddress});\n\n                setSockets(sockets);\n            } catch (error) {\n                reset();\n                alert(error);\n            }\n        } else {\n            reset();\n        }\n    };\n\n    const load = async () => {\n        // Initialize\n        const contract = new Contract(client, contractAddress);\n        await contract.init();\n\n        // Every single time consensus happens on Wavelet, query for the latest\n        // chat logs by calling 'get_messages()' on the smart contract.\n\n        sockets.consensus = await client.pollConsensus({\n            onRoundEnded: _ => {\n                if (contract === undefined) {\n                    return;\n                }\n\n                (async () => {\n                    await contract.fetchAndPopulateMemoryPages();\n                    setChatLogs(contract.test('get_messages', BigInt(0)).logs);\n                })();\n            }\n        });\n\n        setSockets(sockets);\n\n        setChatLogs(contract.test('get_messages', BigInt(0)).logs);\n        setContract(contract);\n    };\n\n    const sendMessage = async () => {\n        const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n        await contract.call(wallet, 'send_message', BigInt(0), BigInt(250000), {type: \"string\", value: message});\n\n        setMessage(\"\");\n    };\n\n    return (\n        <>\n            <Flex>\n                <Box style={{textAlign: 'center'}} width={1}>\n                <h2>A decentralized chat written in JavaScript + Rust (WebAssembly).</h2>\n                </Box>\n            </Flex>\n            <Flex style={{marginTop: '-0.9em', marginBottom:'4em'}}>\n                <Box style={{textAlign: 'center'}} width={1}>\n                    Powered by <a href=\"https://wavelet.perlin.net\">Wavelet</a>. Click <a href=\"#\">here</a> to learn how it works, and <a href=\"https://github.com/perlin-network/decentralized-chat\">here</a> for the source code. Join our <a href=\"https://discord.gg/dMYfDPM\">Discord</a> to get PERLs.\n                </Box>\n\n            </Flex>\n            <Flex mb={2}>\n                <Box width=\"200px\">\n                    <label>[secret]</label>\n                </Box>\n                <Box width={1}>\n                    <input type=\"text\" value={privateKey} disabled={client} data-lpignore=\"true\"\n                           onChange={evt => setPrivateKey(evt.target.value)}/>\n                </Box>\n            </Flex>\n\n            <Flex mb={2}>\n                <Box width=\"200px\">\n                    <label>[node]</label>\n                </Box>\n                <Box width={1}>\n                    <Flex width={1}>\n                        <Box width={9 / 12}>\n                            <input type=\"text\" value={host} disabled={client} data-lpignore=\"true\"\n                                   onKeyPress={async e => {\n                                       if (e.key === 'Enter') {\n                                           await connect()\n                                       }\n                                   }}\n                                   onChange={evt => setHost(evt.target.value)}/>\n                        </Box>\n                        <Box width={3 / 12} style={{minWidth: '10em'}}>\n                            <button style={{width: '100%', float: 'right'}} onClick={connect}\n                                    disabled={privateKey.length !== 128}>{client ? 'Disconnect' : 'Connect'}</button>\n                        </Box>\n                    </Flex>\n                </Box>\n            </Flex>\n\n            <Flex mb={4}>\n                <Box width=\"200px\">\n                    <label>[contract]</label>\n                </Box>\n                <Box width={1}>\n                    <Flex width={1}>\n                        <Box width={9 / 12}>\n                            <input type=\"text\" value={contractAddress}\n                                   placeholder=\"input chat smart contract address...\" disabled={!client} data-lpignore=\"true\"\n                                   onKeyPress={async e => {\n                                       if (e.key === 'Enter') await load()\n                                   }}\n                                   onChange={evt => setContractAddress(evt.target.value)}/>\n                        </Box>\n                        <Box width={3 / 12} style={{minWidth: '10em'}}>\n                            <button style={{width: '100%', float: 'right'}}\n                                    disabled={!client || contractAddress.length !== 64} onClick={load}>\n                                Load Contract\n                            </button>\n                        </Box>\n                    </Flex>\n                </Box>\n            </Flex>\n\n            <Flex mb={2}>\n                <Box width={155}>\n                    <label>[node id]</label>\n                </Box>\n                <Box width={10 / 12}>\n                    <span>{`${node && node.public_key ? node.public_key : \"???\"}`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={2}>\n                <Box width={155}>\n                    <label>[your id]</label>\n                </Box>\n                <Box width={10 / 12}>\n                    <span>{`${account && account.public_key ? account.public_key : \"???\"}`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={4}>\n                <Box width={155}>\n                    <label>[balance]</label>\n                </Box>\n                <Box width={10 / 12}>\n                    <span>{`${account && account.balance ? account.balance : 0} PERL(s)`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={3}>\n                <Box width={2 / 4} pr={3}>\n                    <textarea disabled={!client || !contract} value={message} placeholder=\"enter a message...\" maxLength={240}\n                              onKeyPress={async e => {\n                                  if (e.key === 'Enter' && account.balance >= 250000 && message.length > 0 && message.length <= 240) await sendMessage()\n                              }}\n                              onChange={evt => setMessage(evt.target.value)} className='fw'/>\n                </Box>\n                <Box width={2 / 4}>\n                    <button className='fw' style={{height: \"100%\", minWidth: \"12.5em\"}}\n                            disabled={!client || !contract || !account || account.balance < 250000 || message.length === 0}\n                            onClick={sendMessage}>Send Message [250,000 PERLs]\n                    </button>\n                </Box>\n            </Flex>\n\n            <Flex>\n                <Box width={1}>\n                <textarea disabled={!client || !contract} className='fw' style={{height: \"100%\"}} rows={40} readOnly\n                          placeholder='no messages here so far chief...'\n                          value={chatLogs.length === 1 ? chatLogs[0] : ''}/>\n                </Box>\n            </Flex>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}