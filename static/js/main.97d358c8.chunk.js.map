{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BigInt","JSBI","App","_useState","useState","_useState2","Object","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","host","setHost","_useState3","Buffer","from","Wavelet","generateNewWallet","secretKey","toString","_useState4","privateKey","setPrivateKey","_useState5","undefined","_useState6","client","setClient","_useState7","_useState8","node","setNodeInfo","_useState9","_useState10","contractAddress","setContractAddress","_useState11","_useState12","contract","setContract","_useState13","_useState14","message","setMessage","_useState15","_useState16","chatLogs","setChatLogs","_useState17","_useState18","account","setAccount","accountRef","useRef","useEffect","current","_useState19","accounts","consensus","_useState20","sockets","setSockets","socketsRef","reset","close","connect","_ref","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","_client","wallet","walletAddress","wrap","_context","prev","next","t0","getNodeInfo","t1","sent","loadWalletFromPrivateKey","publicKey","t2","getAccount","t3","pollAccounts","onAccountUpdated","msgs","forEach","msg","event","_home_kenta_Desktop_decentralized_chat_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","balance","id","t4","alert","stop","apply","this","arguments","load","_ref2","_callee3","_context3","Contract","init","pollConsensus","onRoundEnded","_","_callee2","_context2","fetchAndPopulateMemoryPages","test","logs","sendMessage","_ref4","_callee4","_context4","call","type","value","react__WEBPACK_IMPORTED_MODULE_4___default","createElement","Fragment","className","_rebass_grid__WEBPACK_IMPORTED_MODULE_6__","mb","href","alignItems","flex","disabled","data-lpignore","onChange","evt","target","width","onKeyPress","_ref5","_callee5","e","_context5","key","_x","style","minWidth","ml","onClick","length","placeholder","_ref6","_callee6","_context6","_x2","title","concat","public_key","pr","maxLength","preventDefault","height","rows","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97d358c8.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Contract, Wavelet } from 'wavelet-client';\nimport { Box, Flex } from '@rebass/grid';\nimport JSBI from 'jsbi';\n\nconst BigInt = JSBI.BigInt;\n\nconst App = () => {\n  const [host, setHost] = useState('https://testnet.perlin.net');\n  const [privateKey, setPrivateKey] = useState(\n    Buffer.from(Wavelet.generateNewWallet().secretKey, 'binary').toString('hex')\n  );\n  const [client, setClient] = useState(undefined);\n  const [node, setNodeInfo] = useState(undefined);\n  const [contractAddress, setContractAddress] = useState(\n    '9f549686e464b2addfdcd5061deeeb7c622ea430c5f93ddaf5cf8a8f114f8b65'\n  );\n  const [contract, setContract] = useState(undefined);\n  const [message, setMessage] = useState('');\n  const [chatLogs, setChatLogs] = useState([]);\n\n  const [account, setAccount] = useState(undefined);\n\n  const accountRef = useRef(account);\n  useEffect(() => {\n    accountRef.current = account;\n  }, [account]);\n\n  const [sockets, setSockets] = useState({\n    accounts: undefined,\n    consensus: undefined\n  });\n\n  const socketsRef = useRef(sockets);\n  useEffect(() => {\n    socketsRef.current = sockets;\n  }, [sockets]);\n\n  const reset = () => {\n    setClient(undefined);\n    setAccount(undefined);\n    setNodeInfo(undefined);\n\n    setContract(undefined);\n    setContractAddress('');\n    setMessage('');\n    setChatLogs([]);\n\n    const sockets = socketsRef.current;\n\n    if (sockets.accounts) {\n      sockets.accounts.close(1000, 'connection closing normally');\n    }\n\n    if (sockets.consensus) {\n      sockets.consensus.close(1000, 'connection closing normally');\n    }\n\n    setSockets({ accounts: undefined, consensus: undefined });\n  };\n\n  const connect = async () => {\n    if (client === undefined) {\n      try {\n        const client = new Wavelet(host);\n        setNodeInfo(await client.getNodeInfo());\n\n        const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n        const walletAddress = Buffer.from(wallet.publicKey).toString('hex');\n        setAccount(await client.getAccount(walletAddress));\n\n        setClient(client);\n\n        sockets.accounts = await client.pollAccounts(\n          {\n            onAccountUpdated: msgs => {\n              msgs.forEach(msg => {\n                switch (msg.event) {\n                  case 'balance_updated': {\n                    setAccount({ ...accountRef.current, balance: msg.balance });\n                    break;\n                  }\n                  default: {\n                    break;\n                  }\n                }\n              });\n            }\n          },\n          { id: walletAddress }\n        );\n\n        setSockets(sockets);\n      } catch (error) {\n        reset();\n        alert(error);\n      }\n    } else {\n      reset();\n    }\n  };\n\n  const load = async () => {\n    // Initialize\n    const contract = new Contract(client, contractAddress);\n    await contract.init();\n\n    // Every single time consensus happens on Wavelet, query for the latest\n    // chat logs by calling 'get_messages()' on the smart contract.\n\n    sockets.consensus = await client.pollConsensus({\n      onRoundEnded: _ => {\n        if (contract === undefined) {\n          return;\n        }\n\n        (async () => {\n          await contract.fetchAndPopulateMemoryPages();\n          setChatLogs(contract.test('get_messages', BigInt(0)).logs);\n        })();\n      }\n    });\n\n    setSockets(sockets);\n\n    setChatLogs(contract.test('get_messages', BigInt(0)).logs);\n    setContract(contract);\n  };\n\n  const sendMessage = async () => {\n    const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n    await contract.call(wallet, 'send_message', BigInt(0), BigInt(250000), {\n      type: 'string',\n      value: message\n    });\n\n    setMessage('');\n  };\n\n  return (\n    <>\n      <h2 className=\"text-center title\">\n        A decentralized chat written in JavaScript + Rust (WebAssembly).\n      </h2>\n      <Box className=\"text-center\" mb={4}>\n        Powered by <a href=\"https://wavelet.perlin.net\">Wavelet</a>. Click{' '}\n        <a href=\"https://medium.com/perlin-network/build-a-decentralized-chat-using-javascript-rust-webassembly-c775f8484b52\">here</a> to learn how it works, and{' '}\n        <a href=\"https://github.com/perlin-network/decentralized-chat\">here</a>{' '}\n        for the source code. Join our{' '}\n        <a href=\"https://discord.gg/dMYfDPM\">Discord</a> to get PERLs.\n      </Box>\n      <Flex mb={2} alignItems=\"center\">\n        <Box flex=\"0 0 150px\">\n          <label>[secret]</label>\n        </Box>\n        <Box flex=\"1\">\n          <input\n            type=\"text\"\n            value={privateKey}\n            disabled={client}\n            data-lpignore=\"true\"\n            onChange={evt => setPrivateKey(evt.target.value)}\n          />\n        </Box>\n      </Flex>\n\n      <Flex mb={2} alignItems=\"center\">\n        <Box flex=\"0 0 150px\">\n          <label>[node]</label>\n        </Box>\n        <Box flex=\"1\">\n          <Flex width={1}>\n            <Box width={9 / 12}>\n              <input\n                type=\"text\"\n                value={host}\n                disabled={client}\n                data-lpignore=\"true\"\n                onKeyPress={async e => {\n                  if (e.key === 'Enter') {\n                    await connect();\n                  }\n                }}\n                onChange={evt => setHost(evt.target.value)}\n              />\n            </Box>\n            <Box width={3 / 12} style={{ minWidth: '10em' }} ml={2}>\n              <button\n                style={{ width: '100%' }}\n                onClick={connect}\n                disabled={privateKey.length !== 128}\n              >\n                {client ? 'Disconnect' : 'Connect'}\n              </button>\n            </Box>\n          </Flex>\n        </Box>\n      </Flex>\n\n      <Flex mb={4} alignItems=\"center\">\n        <Box flex=\"0 0 150px\">\n          <label>[contract]</label>\n        </Box>\n        <Box flex=\"1\">\n          <Flex width={1}>\n            <Box width={9 / 12}>\n              <input\n                type=\"text\"\n                value={contractAddress}\n                placeholder=\"input chat smart contract address...\"\n                disabled={!client}\n                data-lpignore=\"true\"\n                onKeyPress={async e => {\n                  if (e.key === 'Enter') await load();\n                }}\n                onChange={evt => setContractAddress(evt.target.value)}\n              />\n            </Box>\n            <Box width={3 / 12} style={{ minWidth: '10em' }} ml={2}>\n              <button\n                style={{ width: \"100%\" }}\n                disabled={!client || contractAddress.length !== 64}\n                onClick={load}\n              >\n                Load Contract\n              </button>\n            </Box>\n          </Flex>\n        </Box>\n      </Flex>\n\n      <Flex mb={2} alignItems=\"center\">\n        <Box flex=\"0 0 150px\">\n          <label>[node id]</label>\n        </Box>\n        <Box flex=\"1\" style={{ minWidth: 0 }}>\n          <span\n            className=\"truncate\"\n            title={`${node && node.public_key ? node.public_key : '???'}`}\n          >{`${node && node.public_key ? node.public_key : '???'}`}</span>\n        </Box>\n      </Flex>\n\n      <Flex mb={2} alignItems=\"center\">\n        <Box flex=\"0 0 150px\">\n          <label>[your id]</label>\n        </Box>\n        <Box flex=\"1\" style={{ minWidth: 0 }}>\n          <span\n            className=\"truncate\"\n            title={`${\n              account && account.public_key ? account.public_key : '???'\n              }`}\n          >{`${\n            account && account.public_key ? account.public_key : '???'\n            }`}</span>\n        </Box>\n      </Flex>\n\n      <Flex mb={4} alignItems=\"center\">\n        <Box flex=\"0 0 150px\">\n          <label>[balance]</label>\n        </Box>\n        <Box flex=\"1\">\n          <span>{`${\n            account && account.balance ? account.balance : 0\n            } PERL(s)`}</span>\n        </Box>\n      </Flex>\n\n      <Flex mb={3}>\n        <Box flex=\"1\" pr={2}>\n          <textarea\n            disabled={!client || !contract}\n            value={message}\n            placeholder=\"enter a message...\"\n            maxLength={240}\n            onKeyPress={e => {\n              if (e.key === 'Enter') {\n                if (\n                  account.balance >= 250000 &&\n                  message.length > 0 &&\n                  message.length <= 240\n                ) {\n                  sendMessage();\n                } else {\n                  e.preventDefault();\n                }\n              }\n            }}\n            onChange={evt => setMessage(evt.target.value)}\n            className=\"fw\"\n          />\n        </Box>\n        <Box flex=\"0 0 220px\">\n          <button\n            className=\"fw\"\n            style={{ height: \"98%\" }}\n            disabled={\n              !client ||\n              !contract ||\n              !account ||\n              account.balance < 250000 ||\n              message.length === 0\n            }\n            onClick={sendMessage}\n          >\n            Send Message [250,000 PERLs]\n          </button>\n        </Box>\n      </Flex>\n\n      <textarea\n        disabled={!client || !contract}\n        className=\"fw\"\n        rows={35}\n        readOnly\n        placeholder=\"no messages here so far chief...\"\n        value={chatLogs.length === 1 ? chatLogs[0] : ''}\n      />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}